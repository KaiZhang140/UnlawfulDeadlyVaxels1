[
  {
    "title": "",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  // Add game logic here\n}"
  },
  {
    "title": "Connect 4",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" disabled>Pause Game</button>\n  <button id=\"updateButton\">Show Updates</button>\n  <div id=\"gameArea\"></div>\n</div>\n\n<div id=\"myModal\" class=\"modal\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p>Game Updates</p>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 40px;\n  left: 10px;\n}\n\n#pauseButton {\n  position: absolute;\n  top: 70px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed; /* Stay in place */\n  z-index: 1; /* Sit on top */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0,0,0); /* Fallback color */\n  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 15% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n}\n\n.close {\n  color: #aaaaaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}",
    "javascript": "let score = 0;\nlet gamePaused = false;\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\n\nfunction startGame() {\n  score = 0;\n  gamePaused = false;\n  document.getElementById('score').innerText = score;\n  document.getElementById('pauseButton').disabled = false;\n  // Add game logic here\n}\n\nfunction pauseGame() {\n  gamePaused = !gamePaused;\n  document.getElementById('pauseButton').innerText = gamePaused ? \"Resume Game\" : \"Pause Game\";\n}\n\nfunction showUpdates() {\n  const modal = document.getElementById(\"myModal\");\n  const span = document.getElementsByClassName(\"close\")[0];\n\n  // When the user clicks on the button, open the modal\n  modal.style.display = \"block\";\n\n  // When the user clicks on <span> (x), close the modal\n  span.onclick = function() {\n    modal.style.display = \"none\";\n  }\n\n  // When the user clicks anywhere outside of the modal, close it\n  window.onclick = function(event) {\n    if (event.target == modal) {\n      modal.style.display = \"none\";\n    }\n  }\n}"
  },
  {
    "title": "Connect 4",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" disabled>Pause Game</button>\n  <button id=\"updateButton\">Show Updates</button>\n  <div id=\"gameArea\"></div>\n</div>\n\n<div id=\"myModal\" class=\"modal\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p id=\"updateContent\"></p>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 40px;\n  left: 10px;\n}\n\n#pauseButton {\n  position: absolute;\n  top: 70px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n.modal {\n  display: none; \n  position: fixed;\n  z-index: 1; \n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0,0,0,0.4);\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 15% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n}\n\n.close {\n  color: #aaaaaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}",
    "javascript": "let score = 0;\nlet gamePaused = false;\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\n\nfunction startGame() {\n  score = 0;\n  gamePaused = false;\n  document.getElementById('score').innerText = score;\n  document.getElementById('pauseButton').disabled = false;\n  document.getElementById('pauseButton').innerText = \"Pause Game\";\n  // Add game logic here\n}\n\nfunction pauseGame() {\n  gamePaused = !gamePaused;\n  document.getElementById('pauseButton').innerText = gamePaused ? \"Resume Game\" : \"Pause Game\";\n  // Add pause/resume game logic here\n}\n\nfunction showUpdates() {\n  const modal = document.getElementById(\"myModal\");\n  const span = document.getElementsByClassName(\"close\")[0];\n  const updateContent = document.getElementById(\"updateContent\");\n\n  gamePaused = true; // pause the game when updates are shown\n  document.getElementById('pauseButton').innerText = \"Resume Game\";\n\n  // Fetch updates and display in the modal\n  // Add fetch update logic here\n  updateContent.innerText = \"Example updates here\";\n\n  modal.style.display = \"block\";\n\n  span.onclick = function() {\n    modal.style.display = \"none\";\n    gamePaused = false; // resume the game when updates are closed\n    document.getElementById('pauseButton').innerText = \"Pause Game\";\n  }\n\n  window.onclick = function(event) {\n    if (event.target == modal) {\n      modal.style.display = \"none\";\n      gamePaused = false; // resume the game when modal is closed\n      document.getElementById('pauseButton').innerText = \"Pause Game\";\n    }\n  }\n}"
  },
  {
    "title": "Connect 4",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" disabled>Pause Game</button>\n  <button id=\"updateButton\">Show Updates</button>\n  <div id=\"gameArea\">\n    <div class=\"row\" id=\"row0\"></div>\n    <div class=\"row\" id=\"row1\"></div>\n    <div class=\"row\" id=\"row2\"></div>\n    <div class=\"row\" id=\"row3\"></div>\n    <div class=\"row\" id=\"row4\"></div>\n    <div class=\"row\" id=\"row5\"></div>\n  </div>\n</div>\n\n<div id=\"myModal\" class=\"modal\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p id=\"updateContent\"></p>\n  </div>\n</div>",
    "css": "#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  display: flex;\n  flex-direction: column;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n}\n\n.cell {\n  width: 30px;\n  height: 30px;\n  margin: 5px;\n  background-color: lightgrey;\n  border-radius: 50%;\n}\n\n.red {\n  background-color: red;\n}\n\n.yellow {\n  background-color: yellow;\n}",
    "javascript": "let score = 0;\nlet gamePaused = false;\nlet currentPlayer = \"red\";\nlet gameOver = true;\nlet board = [];\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\n\n// Populate an empty board at start\nfor(let i = 0; i < 6; i++){\n  let row = Array(7).fill(null);\n  board.push(row);\n}\n\n// Click event for every cell\nfor(let rowNum = 0; rowNum < 6; rowNum++){\n  for(let colNum = 0; colNum < 7; colNum++){\n    let cell = document.createElement(\"div\");\n    cell.classList.add(\"cell\");\n    cell.addEventListener('click', () => placeDisc(colNum));        \n    document.getElementById(\"row\" + rowNum).appendChild(cell);\n  }\n}\n\nfunction startGame() {\n  score = 0;\n  gamePaused = false;\n  gameOver = false;\n  currentPlayer = \"red\";\n  document.getElementById('score').innerText = score;\n  document.getElementById('pauseButton').disabled = false;\n  document.getElementById('pauseButton').innerText = \"Pause Game\";\n\n  // Reset board view\n  let cells = document.querySelectorAll(\".cell\");\n  cells.forEach(cell => cell.className = \"cell\");\n}\n\nfunction pauseGame() {\n  if(!gameOver){\n    gamePaused = !gamePaused;\n    document.getElementById('pauseButton').innerText = gamePaused ? \"Resume Game\" : \"Pause Game\";\n  }\n}\n\nfunction placeDisc(colNum) {\n  if(!gamePaused && !gameOver) {\n    let row;\n    for (row = 5; row >= 0 && board[row][colNum] !== null; row--) {}\n    if (row >= 0) {\n      board[row][colNum] = currentPlayer;\n      document.getElementById(\"row\" + row).children[colNum].classList.add(currentPlayer);\n      currentPlayer = currentPlayer === \"red\" ? \"yellow\" : \"red\";\n    }\n  }\n}\n\nfunction showUpdates() {\n  // ... same as before ...\n}"
  },
  {
    "title": "Connect 4",
    "html": "<body>\n<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" disabled>Pause Game</button>\n  <button id=\"updateButton\">Show Updates</button>\n  <div id=\"gameArea\">\n    <!-- Game grid is generated by JavaScript -->\n  </div>\n</div>\n\n<div id=\"myModal\" class=\"modal\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p id=\"updateContent\">Updates will appear here!</p>\n  </div>\n</div>\n</body>",
    "css": "#gameArea {\n  width: 100%;\n  height: 60vh;\n  background-color: lightblue;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n}\n\n.cell {\n  width: 40px;\n  height: 40px;\n  margin: 5px;\n  background-color: white;\n  border-radius: 50%;\n}\n\n.red {\n  background-color: red;\n}\n\n.yellow {\n  background-color: yellow;\n}\n\n.modal {\n  display: none; \n  position: fixed; \n  z-index: 1; \n  padding-top: 100px; \n  width: 100%; \n  height: 100%; \n  overflow: auto; \n  background-color: rgba(0,0,0,0.4); \n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n}\n\n.close {\n  color: #aaaaaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}",
    "javascript": "let score = 0;\nlet gamePaused = false;\nlet currentPlayer = \"red\";\nlet gameOver = true;\nlet board = [];\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\nconst modal = document.getElementById('myModal');\nconst closeButton = document.getElementsByClassName('close')[0];\ncloseButton.onclick = function() {\n  modal.style.display = \"none\";\n  gamePaused = false;\n}\n\nfor(let i = 0; i < 6; i++){\n  let row = Array(7).fill(null);\n  board.push(row);\n}\n\nfor(let rowNum = 0; rowNum < 6; rowNum++){\n  let rowDiv = document.createElement(\"div\");\n  rowDiv.classList.add(\"row\");\n\n  for(let colNum = 0; colNum < 7; colNum++){\n    let cell = document.createElement(\"div\");\n    cell.classList.add(\"cell\");\n    cell.addEventListener('click', () => placeDisc(colNum));        \n    rowDiv.appendChild(cell);\n  }\n\n  document.getElementById(\"gameArea\").appendChild(rowDiv);\n}\n\nfunction startGame() {\n  score = 0;\n  gamePaused = false;\n  gameOver = false;\n  currentPlayer = \"red\";\n  document.getElementById('score').innerText = score;\n  document.getElementById('pauseButton').disabled = false;\n  document.getElementById('pauseButton').innerText = \"Pause Game\";\n\n  let cells = document.querySelectorAll(\".cell\");\n  cells.forEach(cell => cell.style.backgroundColor = \"white\");\n}\n\nfunction pauseGame() {\n  if(!gameOver){\n    gamePaused = !gamePaused;\n    document.getElementById('pauseButton').innerText = gamePaused ? \"Resume Game\" : \"Pause Game\";\n  }\n}\n\nfunction placeDisc(colNum) {\n  if(!gamePaused && !gameOver) {\n    let row;\n    for (row = 5; row >= 0 && board[row][colNum] !== null; row--) {}\n    if (row >= 0) {\n      board[row][colNum] = currentPlayer;\n      document.querySelectorAll(\".row\")[row].children[colNum].style.backgroundColor = currentPlayer;\n      currentPlayer = currentPlayer === \"red\" ? \"yellow\" : \"red\";\n    }\n  }\n}\n\nfunction showUpdates() {\n  modal.style.display = \"block\";\n  gamePaused = true;\n}"
  },
  {
    "title": "Connect 4",
    "html": "<body>\n<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" disabled>Pause Game</button>\n  <button id=\"updateButton\">Show Updates</button>\n  <div id=\"gameArea\"></div>\n</div>\n\n<div id=\"myModal\" class=\"modal\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p id=\"updateContent\">Updates will appear here!</p>\n  </div>\n</div>\n</body>",
    "css": "#gameArea {\n  width: 100%;\n  height: 60vh;\n  background-color: lightblue;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n}\n\n.cell {\n  width: 40px;\n  height: 40px;\n  margin: 5px;\n  background-color: white;\n  border-radius: 50%;\n}\n\n.red {\n  background-color: red;\n}\n\n.yellow {\n  background-color: yellow;\n}\n\n.modal {\n  display: none; \n  position: fixed; \n  z-index: 1; \n  padding-top: 100px; \n  width: 100%; \n  height: 100%; \n  overflow: auto; \n  background-color: rgba(0,0,0,0.4); \n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n}\n\n.close {\n  color: #aaaaaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}",
    "javascript": "let score = 0;\nlet gamePaused = false;\nlet currentPlayer = \"red\";\nlet gameOver = true;\nlet board = [];\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\nconst modal = document.getElementById('myModal');\nconst closeButton = document.getElementsByClassName('close')[0];\ncloseButton.onclick = function() {\n  modal.style.display = \"none\";\n  gamePaused = false;\n}\n\nfor(let i = 0; i < 6; i++){\n  let row = Array(7).fill(null);\n  board.push(row);\n}\n\nfor(let rowNum = 0; rowNum < 6; rowNum++){\n  let rowDiv = document.createElement(\"div\");\n  rowDiv.classList.add(\"row\");\n\n  for(let colNum = 0; colNum < 7; colNum++){\n    let cell = document.createElement(\"div\");\n    cell.classList.add(\"cell\");\n    cell.addEventListener('click', () => placeDisc(colNum));        \n    rowDiv.appendChild(cell);\n  }\n\n  document.getElementById(\"gameArea\").appendChild(rowDiv);\n}\n\nfunction startGame() {\n  score = 0;\n  gamePaused = false;\n  gameOver = false;\n  currentPlayer = \"red\";\n  document.getElementById('score').innerText = score;\n  document.getElementById('pauseButton').disabled = false;\n  document.getElementById('pauseButton').innerText = \"Pause Game\";\n\n  let cells = document.querySelectorAll(\".cell\");\n  cells.forEach(cell => cell.style.backgroundColor = \"white\");\n}\n\nfunction pauseGame() {\n  if(!gameOver){\n    gamePaused = !gamePaused;\n    document.getElementById('pauseButton').innerText = gamePaused ? \"Resume Game\" : \"Pause Game\";\n  }\n}\n\nfunction placeDisc(colNum) {\n  if(!gamePaused && !gameOver) {\n    let row;\n    for (row = 5; row >= 0 && board[row][colNum] !== null; row--) {}\n    if (row >= 0) {\n      board[row][colNum] = currentPlayer;\n      document.querySelectorAll(\".row\")[row].children[colNum].style.backgroundColor = currentPlayer;\n\n      if (checkWin(currentPlayer)) {\n        gamePaused=true;\n        gameOver=true;\n        document.getElementById('pauseButton').innerText = \"Game Over\";\n        alert(`${currentPlayer} Won!`);\n      }\n\n      currentPlayer = currentPlayer === \"red\" ? \"yellow\" : \"red\";\n    }\n  }\n}\n\nfunction showUpdates() {\n  modal.style.display = \"block\";\n  gamePaused = true;\n}\n\nfunction checkWin(player) {\n  // Check horizontal places\n  for (let row = 0; row < board.length; row++)\n    for (let col = 0; col < board[0].length - 3; col++)\n      if (board[row][col] == player && board[row][col + 1] == player && board[row][col + 2] == player && board[row][col + 3] == player)\n        return true;\n\n  // Check vertical places\n  for (let row = 0; row < board.length - 3; row++)\n    for (let col = 0; col < board[0].length; col++)\n      if (board[row][col] == player && board[row + 1][col] == player && board[row + 2][col] == player && board[row + 3][col] == player)\n        return true;\n\n  // Check main diag\n  for (let row = 3; row < board.length; row++) \n    for (let col = 0; col < board[0].length - 3; col++)\n      if (board[row][col] == player && board[row - 1][col + 1] == player && board[row - 2][col + 2] == player && board[row - 3][col + 3] == player)\n        return true;\n\n  // Check counter diag\n  for (let row = 3; row < board.length; row++)\n    for (let col = 3; col < board[0].length; col++)\n      if (board[row][col] == player && board[row - 1][col - 1] == player && board[row - 2][col - 2] == player && board[row - 3][col - 3] == player)\n        return true;\n\n  return false;\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" style=\"display:none;\">Pause</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 200px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', updateGame);\ndocument.getElementById('closeUpdates').addEventListener('click', closeUpdateMenu);\n\nvar gamePaused = false;\n\nfunction startGame() {\n  gamePaused = false;\n  document.getElementById('score').innerText = 0;\n  document.getElementById('startButton').style.display = \"none\";\n  document.getElementById('pauseButton').style.display = \"inline\";\n  // Add game logic here\n}\n\nfunction pauseGame() {\n  gamePaused = true;\n  document.getElementById('startButton').style.display = \"inline\";\n  document.getElementById('pauseButton').style.display = \"none\";\n\n  if(gamePaused) {\n    // Pause game logic\n  }\n}\n\nfunction updateGame() {\n  gamePaused = true;\n  document.getElementById('updateMenu').style.display = \"block\";\n  document.getElementById('updateText').innerText = \"Your game updates here.\";\n  document.getElementById('startButton').style.display = \"none\";\n  document.getElementById('pauseButton').style.display = \"none\";\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = \"none\";\n  gamePaused = false;\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"menu\">\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause</button>\n    <button id=\"updateButton\">Updates</button>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n  </div>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 2;\n}\n\n#menu {\n  position: absolute;\n  top: 30px;\n  left: 40px;\n}\n\n#startButton, #pauseButton {\n  display : none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 200px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  display: none;\n  z-index: 1;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', updateGame);\ndocument.getElementById('closeUpdates').addEventListener('click', closeUpdateMenu);\n\nvar gamePaused = false;\n\nfunction startGame() {\n  gamePaused = false;\n  document.getElementById('score').innerText = 0;\n  document.getElementById('startButton').style.display = \"none\";\n  document.getElementById('pauseButton').style.display = \"inline\";\n  document.getElementById('updateButton').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"none\";\n  document.getElementById('updateMenu').style.display = \"none\";\n\n  // Add game logic here\n}\n\nfunction pauseGame() {\n  if(!gamePaused) {\n    // Pause game logic\n    gamePaused = true;\n    document.getElementById('pauseButton').innerText = \"Resume\";\n  } else {\n    // Resume game logic\n    gamePaused = false;\n    document.getElementById('pauseButton').innerText = \"Pause\";\n  }\n}\n\nfunction updateGame() {\n  gamePaused = true;\n  document.getElementById('updateMenu').style.display = \"block\";\n  document.getElementById('updateText').innerText = \"Your game updates here.\";\n  document.getElementById('startButton').style.display = \"inline\";\n  document.getElementById('pauseButton').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"inline\";\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = \"none\";\n  gamePaused = false;\n}"
  },
  {
    "title": "Connect 4",
    "html": "<body>\n<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" disabled>Pause Game</button>\n  <button id=\"updateButton\">Show Updates</button>\n  <div id=\"gameArea\"></div>\n</div>\n\n<div id=\"myModal\" class=\"modal\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p id=\"updateContent\">Updates will appear here!</p>\n  </div>\n</div>\n</body>",
    "css": "#gameArea {\n  width: 100%;\n  height: 60vh;\n  background-color: lightblue;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n}\n\n.cell {\n  width: 40px;\n  height: 40px;\n  margin: 5px;\n  background-color: white;\n  border-radius: 50%;\n}\n\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1;\n  padding-top: 100px;\n  left: 0;\n  top: 0;\n  width: 100%; \n  height: 100%;\n  overflow: auto;\n  background-color: rgb(0,0,0);\n  background-color: rgba(0,0,0,0.4);\n}\n\n.modal-content {\n  margin: auto;\n  display: block;\n  width: 80%;\n  max-width: 700px;\n}",
    "javascript": "let score = 0;\nlet gamePaused = false;\nlet currentPlayer = \"red\";\nlet gameOver = true;\nlet board = [];\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\nconst modal = document.getElementById('myModal');\nconst closeButton = document.getElementsByClassName('close')[0];\n\nfor(let i = 0; i < 6; i++){\n  let row = Array(7).fill(null);\n  board.push(row);\n}\n\nfor(let rowNum = 0; rowNum < 6; rowNum++){\n  let rowDiv = document.createElement(\"div\");\n  rowDiv.classList.add(\"row\");\n\n  for(let colNum = 0; colNum < 7; colNum++){\n    let cell = document.createElement(\"div\");\n    cell.classList.add(\"cell\");\n    cell.onclick = function() { \n        placeDisc(colNum); \n    };\n    rowDiv.appendChild(cell);\n  }\n\n  document.getElementById(\"gameArea\").appendChild(rowDiv);\n}\n\ncloseButton.onclick = function() {\n  modal.style.display = \"none\";\n  gamePaused = false;\n}\n\nfunction startGame() {\n  score = 0; \n  gamePaused = false;\n  gameOver = false;\n  currentPlayer = \"red\";\n  document.getElementById('score').innerText = score;\n  document.getElementById('pauseButton').disabled = false;\n  document.getElementById('pauseButton').innerText = \"Pause Game\";\n\n  let cells = document.querySelectorAll(\".cell\");\n  cells.forEach(cell => cell.style.backgroundColor = \"white\");\n}\n\nfunction pauseGame() {\n  if(!gameOver){\n    gamePaused = !gamePaused;\n    document.getElementById('pauseButton').innerText = gamePaused ? \"Resume Game\" : \"Pause Game\";\n  }\n}\n\nfunction placeDisc(colNum) {\n  if(!gamePaused && !gameOver) {\n    let row;\n    for (row = 5; row >= 0 && board[row][colNum] !== null; row--) {}\n    if (row >= 0) {\n      board[row][colNum] = currentPlayer;\n      document.querySelectorAll(\".row\")[row].children[colNum].style.backgroundColor = currentPlayer;\n\n      if (checkWin(currentPlayer)) {\n        score++;\n        document.getElementById('score').innerText = score;\n        gamePaused=true;\n        gameOver=true;\n        document.getElementById('pauseButton').innerText = \"Game Over\";\n        alert(`${currentPlayer} Won!`);\n      }\n\n      currentPlayer = currentPlayer === \"red\" ? \"yellow\" : \"red\";\n    }\n  }\n}\n\nfunction showUpdates() {\n  modal.style.display = \"block\";\n  gamePaused = true;\n}\n\nfunction checkWin(player) {\n  //Check horizontal places\n  //Check vertical places\n  //Check main diag\n  //Check counter diag\n\n  return false;\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"gameArea\"></div>\n    <div id=\"updateMenu\">\n        <h2>Updates:</h2>\n        <p id=\"updateText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#pauseButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n#updateMenu {\n  display: none;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 200px;\n}\n\n#resumeButton {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', closeUpdateMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  // Add game logic here\n  gameInterval = setInterval(runGame, 1000); // Assuming the game runs on a 1 second loop\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('updateMenu').style.display = \"block\";\n  document.getElementById('updateText').innerText = \"Game paused.\";\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction runGame() {\n  // game code goes here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"gameArea\"></div>\n    <div id=\"upgradeMenu\" class=\"panel\">\n    <button id=\"closeUpgradeMenu\">Close</button>\n        <h2>Upgrades:</h2>\n        <p id=\"upgradeText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-bottom: 10px;\n}\n\n#pauseButton {\n  top: 90px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n.panel {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 240px;\n  display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('upgradeMenu').style.display = \"block\";\n  document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction closeUpgradeMenu() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction runGame() {\n  // Add game logic here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"gameArea\">\n        <div id=\"minefield\"></div>\n    </div>\n    <div id=\"upgradeMenu\" class=\"panel\">\n    <button id=\"closeUpgradeMenu\">Close</button>\n        <h2>Upgrades:</h2>\n        <p id=\"upgradeText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-bottom: 10px;\n}\n\n#pauseButton {\n  top: 90px;\n}\n\n#gameArea, #minefield {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n.mine {\n  background-color: red;\n}\n\n.clear {\n  background-color: white;\n}\n\n.panel {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 240px;\n  display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  generateMinefield(10, 10); // 10x10 grid\n  gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('upgradeMenu').style.display = \"block\";\n  document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction closeUpgradeMenu() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n  for(var i = 0; i < width; i++){\n    for(var j = 0; j < height; j++){\n      var square = document.createElement('div');\n      square.style.width = '10px';\n      square.style.height = '10px';\n      square.style.border = '1px solid black';\n      square.style.float = 'left';\n      if(Math.random() > 0.8){// 20% chance of a mine\n        square.classList.add('mine');\n      } else {\n        square.classList.add('clear');\n      }\n      minefield.appendChild(square);\n    }\n    var br = document.createElement('br');\n    minefield.appendChild(br);\n  }\n}\n\nfunction runGame() {\n  // Add game logic here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"minefield\"></div>\n    <div id=\"upgradeMenu\" class=\"panel\">\n        <button id=\"closeUpgradeMenu\">Close</button>\n        <h2>Upgrades:</h2>\n        <p id=\"upgradeText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>\n</body>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-bottom: 10px;\n}\n\n#pauseButton {\n  top: 90px;\n}\n\n#minefield {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n.mine {\n  background-color: red;\n}\n\n.clear {\n  background-color: white;\n}\n\n.panel {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 240px;\n  display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 10;\nvar height = 10;\nvar board = [];\n\nfunction createBoard(width, height) {\n  for(var i = 0; i < width; i++){\n    board[i] = [];\n    for(var j = 0; j < height; j++){\n      board[i][j] = Math.random() > 0.8 ? 'mine' : 'clear';\n    }\n  }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  createBoard(width, height); \n  generateMinefield(width, height);\n  gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('upgradeMenu').style.display = \"block\";\n  document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction closeUpgradeMenu() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n  for(var i = 0; i < width; i++){\n    for(var j = 0; j < height; j++){\n      var square = document.createElement('div');\n      square.style.width = '10px';\n      square.style.height = '10px';\n      square.style.border = '1px solid black';\n      square.classList.add(board[i][j]);\n      square.dataset.i = i;\n      square.dataset.j = j;\n      square.addEventListener('click', squareClicked);\n      minefield.appendChild(square);\n    }\n  }\n}\n\nfunction squareClicked(e) {\n  var i = e.target.dataset.i;\n  var j = e.target.dataset.j;\n  for (var x=-1; x<=1; x++) {\n    for (var y=-1; y<=1; y++) {\n      try {\n        if(board[i-x][j-y] === 'mine') {\n          e.target.textContent ++;\n        }\n      }catch(e){}\n    }\n  }\n}\n\nfunction runGame() {\n  // Add game logic here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"minefield\"></div>\n    <div id=\"upgradeMenu\" class=\"panel\">\n        <button id=\"closeUpgradeMenu\">Close</button>\n        <h2>Upgrades:</h2>\n        <p id=\"upgradeText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>\n</body>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#pauseButton {\n  top: 90px;\n}\n\n#minefield {\n  width: 100%;\n  height: 100%;\n  background-color: lightgray;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n#minefield div {\n  width: 10%;\n  height: 10%;\n  border: 1px solid black;\n}\n\n.mine {\n  background-color: red;\n}\n\n.clear {\n  background-color: white;\n}\n\n.panel {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 240px;\n  display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 10;\nvar height = 10;\nvar board = [];\n\nfunction createBoard(width, height) {\n  for(var i = 0; i < width; i++){\n    board[i] = [];\n    for(var j = 0; j < height; j++){\n      board[i][j] = Math.random() > 0.8 ? 'mine' : 'clear';\n    }\n  }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  createBoard(width, height);\n  generateMinefield(width, height);\n  gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('upgradeMenu').style.display = \"block\";\n  document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction closeUpgradeMenu() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n  for(var i = 0; i < width; i++){\n    for(var j = 0; j < height; j++){\n      var square = document.createElement('div');\n      square.classList.add(board[i][j]);\n      square.dataset.i = i;\n      square.dataset.j = j;\n      square.addEventListener('click', squareClicked);\n      minefield.appendChild(square);\n    }\n  }\n}\n\nfunction squareClicked(e) {\n  var i = e.target.dataset.i;\n  var j = e.target.dataset.j;\n  for (var x=-1; x<=1; x++) {\n    for (var y=-1; y<=1; y++) {\n      try {\n        if(board[i-x][j-y] === 'mine') {\n          e.target.textContent ++;\n        }\n      }catch(e){}\n    }\n  }\n}\n\nfunction runGame() {\n  // Add game logic here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"minefield\"></div>\n    <div id=\"upgradeMenu\" class=\"panel\">\n        <button id=\"closeUpgradeMenu\">Close</button>\n        <h2>Upgrades:</h2>\n        <p id=\"upgradeText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>\n</body>",
    "css": "#gameWindow {\n  width: 1010px;\n  height: 1010px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#pauseButton {\n  top: 90px;\n}\n\n#minefield {\n  width: 100%;\n  height: 100%;\n  background-color: lightgray;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between; \n}\n\n#minefield div {\n  width: 10%;\n  height: 10%;\n  box-sizing: border-box;\n  border: 1px solid black;\n}\n\n.mine {\n  background-color: red;\n}\n\n.clear {\n  background-color: white;\n}\n\n.panel {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 240px;\n  display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 10;\nvar height = 10;\nvar board = [];\n\nfunction createBoard(width, height) {\n  for(var i = 0; i < width; i++){\n    board[i] = [];\n    for(var j = 0; j < height; j++){\n      board[i][j] = Math.random() > 0.8 ? 'mine' : 'clear';\n    }\n  }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  createBoard(width, height);\n  generateMinefield(width, height);\n  gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('upgradeMenu').style.display = \"block\";\n  document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction closeUpgradeMenu() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n  for(var i = 0; i < width; i++){\n    for(var j = 0; j < height; j++){\n      var square = document.createElement('div');\n      square.classList.add(board[i][j]);\n      square.dataset.i = i;\n      square.dataset.j = j;\n      square.addEventListener('click', squareClicked);\n      minefield.appendChild(square);\n    }\n  }\n}\n\nfunction squareClicked(e) {\n  var i = e.target.dataset.i;\n  var j = e.target.dataset.j;\n  for (var x=-1; x<=1; x++) {\n    for (var y=-1; y<=1; y++) {\n      try {\n        if(board[i-x][j-y] === 'mine') {\n          e.target.textContent ++;\n        }\n      }catch(e){}\n    }\n  }\n}\n\nfunction runGame() {\n  // Add game logic here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"minefield\"></div>\n    <div id=\"upgradeMenu\" class=\"panel\">\n        <button id=\"closeUpgradeMenu\">Close</button>\n        <h2>Upgrades:</h2>\n        <p id=\"upgradeText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>\n</body>",
    "css": "#gameWindow {\n  width: 1010px;\n  height: 1010px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#pauseButton {\n  top: 90px;\n}\n\n#minefield {\n  width: 100%;\n  height: 100%;\n  background-color: lightgray;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between; \n}\n\n#minefield div {\n  width: 10%;\n  height: 10%;\n  box-sizing: border-box;\n  border: 1px solid black;\n}\n\n.mine.revealed{\n  background-color: red;\n}\n\n.clear.revealed {\n  background-color: white;\n}\n\n.panel {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 240px;\n  display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 10;\nvar height = 10;\nvar board = [];\n\nfunction createBoard(width, height) {\n  for(var i = 0; i < width; i++){\n    board[i] = [];\n    for(var j = 0; j < height; j++){\n      board[i][j] = Math.random() > 0.8 ? 'mine' : 'clear';\n    }\n  }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  createBoard(width, height);\n  generateMinefield(width, height);\n  gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('upgradeMenu').style.display = \"block\";\n  document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction closeUpgradeMenu() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n  for(var i = 0; i < width; i++){\n    for(var j = 0; j < height; j++){\n      var square = document.createElement('div');\n      square.classList.add(board[i][j]);\n      square.dataset.i = i;\n      square.dataset.j = j;\n      square.addEventListener('click', squareClicked);\n      minefield.appendChild(square);\n    }\n  }\n}\n\nfunction squareClicked(e) {\n  var i = parseInt(e.target.dataset.i);\n  var j = parseInt(e.target.dataset.j);\n  e.target.classList.add('revealed');\n  var mines = 0;\n  for (var x=-1; x<=1; x++) {\n    for (var y=-1; y<=1; y++) {\n      try {\n        if(board[i-x][j-y] === 'mine') {\n          mines++;\n        }\n      }catch(e){}\n    }\n  }\n  e.target.textContent = mines > 0 ? mines : '';\n  if(mines === 0) {\n    revealClearArea(i,j);\n  }\n}\n\nfunction revealClearArea(i,j) { \n  for (var x=-1; x<=1; x++) {\n    for (var y=-1; y<=1; y++) {\n      try {\n        if(board[i-x][j-y] !== 'mine') {\n          minefield.children[(i-x)*width+(j-y)].classList.add('revealed');\n        }\n      } catch(e){}\n    }\n  }\n}\n\nfunction runGame() {\n  // Add game logic here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n    <div id=\"gameWindow\">\n        <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n        <button id=\"startButton\">Start Game</button>\n        <button id=\"pauseButton\">Pause Game</button>\n        <div id=\"minefield\"></div>\n        <div id=\"upgradeMenu\" class=\"panel\">\n             <button id=\"closeUpgradeMenu\">Close</button>\n             <h2>Upgrades:</h2>\n             <p id=\"upgradeText\"></p>\n             <button id=\"resumeButton\">Resume Game</button>\n        </div>\n    </div>\n</body>",
    "css": "#gameWindow {\n    width: 1010px;\n    height: 1010px;\n    border: 2px solid black;\n    position: relative;\n    margin: auto;\n}\n\n#scoreBoard {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    font-size: 20px;\n}\n\n#startButton, #pauseButton {\n    position: absolute;\n    top: 50px;\n    left: 10px;\n}\n\n#pauseButton {\n    top: 90px;\n}\n\n#minefield {\n    width: 100%;\n    height: 100%;\n    background-color: lightgray;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between; \n}\n\n#minefield div {\n    width: 10%;\n    height: 10%;\n    box-sizing: border-box;\n    border: 1px solid black;\n}\n\n.mine.revealed{\n    background-color: red;\n}\n\n.clear.revealed {\n    background-color: white;\n}\n\n.panel {\n    position: absolute;\n    top: 40px;\n    right: 20px;\n    padding: 20px;\n    border: 2px solid black;\n    background-color: white;\n    width: 240px;\n    display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n    display: block;\n    margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 10;\nvar height = 10;\nvar board = [];\nvar gameStarted = false;\nvar clickedElement = null;\n\nfunction createBoard(width, height) {\n    for (var i = 0; i < width; i++){\n        board[i] = [];\n        for (var j = 0; j < height; j++){\n            board[i][j] = Math.random() > 0.8 ? 'mine' : 'clear';\n        }\n    }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n    document.getElementById('score').innerText = 0;\n    createBoard(width, height);\n    generateMinefield(width, height);\n    gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n    clearInterval(gameInterval);\n    gameInterval = null;\n    document.getElementById('upgradeMenu').style.display = \"block\";\n    document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n    document.getElementById('upgradeMenu').style.display = \"none\";\n    if (gameInterval === null) {\n        gameInterval = setInterval(runGame, 1000);\n    }\n}\n\nfunction closeUpgradeMenu() {\n    document.getElementById('upgradeMenu').style.display = \"none\";\n    document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n    for (var i = 0; i < width; i++){\n        for (var j = 0; j < height; j++){\n            var square = document.createElement('div');\n            square.classList.add(board[i][j]);\n            square.dataset.i = i;\n            square.dataset.j = j;\n            square.addEventListener('click', squareClicked);\n            minefield.appendChild(square);\n        }\n    }\n}\n\nfunction squareClicked(e) {\n    clickedElement = e.target;\n    var i = parseInt(e.target.dataset.i);\n    var j = parseInt(e.target.dataset.j);\n    if (!gameStarted) {\n        gameStarted = true;\n        clearArea(i, j);\n    }\n    e.target.classList.add('revealed');\n    var mines = countMines(i, j);\n    e.target.textContent = mines > 0 ? mines : '';\n    if (mines === 0) {\n        revealClearArea(i, j);\n    }\n}\n\nfunction runGame() {\n    // Add game logic here\n}\n\nfunction clearArea(i, j) {\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            if (board[x][y] === 'mine') {\n                board[x][y] = 'clear';\n                let square = minefield.children[x * width + y];\n                square.classList.remove('mine');\n                square.classList.add('clear');\n            }\n        }\n    }\n}\n\nfunction countMines(i, j) {\n    var mines = 0;\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            if (board[x][y] === 'mine') {\n                mines++;\n            }\n        }\n    }\n    return mines;\n}\n\nfunction revealClearArea(i, j) {\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            let square = minefield.children[x * width + y];\n            if (!square.classList.contains('revealed')) {\n                square.classList.add('revealed');\n                if (board[x][y] !== 'mine') {\n                    square.click();\n                }\n            }\n        }\n    }\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n    <div id=\"gameWindow\">\n        <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n        <button id=\"startButton\">Start Game</button>\n        <button id=\"pauseButton\">Pause Game</button>\n        <div id=\"minefield\"></div>\n        <div id=\"upgradeMenu\" class=\"panel\">\n             <button id=\"closeUpgradeMenu\">Close</button>\n             <h2>Upgrades:</h2>\n             <p id=\"upgradeText\"></p>\n             <button id=\"resumeButton\">Resume Game</button>\n        </div>\n    </div>\n</body>",
    "css": "#gameWindow {\n    width: 800px;\n    height: 800px;\n    border: 2px solid black;\n    position: relative;\n    margin: auto;\n}\n\n#scoreBoard {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    font-size: 20px;\n}\n\n#startButton, #pauseButton {\n    position: absolute;\n    top: 50px;\n    left: 10px;\n}\n\n#pauseButton {\n    top: 90px;\n}\n\n#minefield {\n    width: 100%;\n    height: 100%;\n    background-color: lightgray;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between; \n}\n\n#minefield div {\n    width: 5%;\n    height: 5%;\n    box-sizing: border-box;\n    border: 1px solid black;\n}\n\n.mine.revealed{\n    background-color: red;\n}\n\n.marked {\n    background-color: orange;\n}\n\n.clear.revealed {\n    background-color: white;\n}\n\n.panel {\n    position: absolute;\n    top: 40px;\n    right: 20px;\n    padding: 20px;\n    border: 2px solid black;\n    background-color: white;\n    width: 240px;\n    display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n    display: block;\n    margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 20;\nvar height = 20;\nvar board = [];\nvar gameStarted = false;\nvar clickedElement = null;\n\nfunction createBoard(width, height) {\n    for (var i = 0; i < width; i++){\n        board[i] = [];\n        for (var j = 0; j < height; j++){\n            board[i][j] = Math.random() > 0.6 ? 'mine' : 'clear';\n        }\n    }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n    document.getElementById('score').innerText = 0;\n    createBoard(width, height);\n    generateMinefield(width, height);\n    gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n    clearInterval(gameInterval);\n    gameInterval = null;\n    document.getElementById('upgradeMenu').style.display = \"block\";\n    document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n    document.getElementById('upgradeMenu').style.display = \"none\";\n    if (gameInterval === null) {\n        gameInterval = setInterval(runGame, 1000);\n    }\n}\n\nfunction closeUpgradeMenu() {\n    document.getElementById('upgradeMenu').style.display = \"none\";\n    document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n    for (var i = 0; i < width; i++){\n        for (var j = 0; j < height; j++){\n            var square = document.createElement('div');\n            square.classList.add(board[i][j]);\n            square.dataset.i = i;\n            square.dataset.j = j;\n            square.addEventListener('click', squareClicked);\n            square.addEventListener('contextmenu', squareMarked)\n            minefield.appendChild(square);\n        }\n    }\n}\n\nfunction squareMarked(e){\n    e.preventDefault();\n    var i = parseInt(e.target.dataset.i);\n    var j = parseInt(e.target.dataset.j);\n    e.target.classList.add('marked');\n}\n\nfunction squareClicked(e) {\n    clickedElement = e.target;\n    var i = parseInt(e.target.dataset.i);\n    var j = parseInt(e.target.dataset.j);\n    if (!gameStarted) {\n        gameStarted = true;\n        clearArea(i, j);\n    }\n    e.target.classList.add('revealed');\n    var mines = countMines(i, j);\n    e.target.textContent = mines > 0 ? mines : '';\n    if (mines === 0) {\n        revealClearArea(i, j);\n    }\n}\n\nfunction runGame() {\n    // Add game logic here\n}\n\nfunction clearArea(i, j) {\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            if (board[x][y] === 'mine') {\n                board[x][y] = 'clear';\n                let square = minefield.children[x * width + y];\n                square.classList.remove('mine');\n                square.classList.add('clear');\n            }\n        }\n    }\n}\n\nfunction countMines(i, j) {\n    var mines = 0;\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            if (board[x][y] === 'mine') {\n                mines++;\n            }\n        }\n    }\n    return mines;\n}\n\nfunction revealClearArea(i, j) {\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            let square = minefield.children[x * width + y];\n            if (!square.classList.contains('revealed')) {\n                square.classList.add('revealed');\n                if (board[x][y] !== 'mine') {\n                    square.click();\n                }\n            }\n        }\n    }\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n    <div id=\"gameWindow\">\n        <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n        <button id=\"startButton\">Start Game</button>\n        <button id=\"pauseButton\">Pause Game</button>\n        <div id=\"minefield\"></div>\n        <div id=\"upgradeMenu\" class=\"panel\">\n             <button id=\"closeUpgradeMenu\">Close</button>\n             <h2>Upgrades:</h2>\n             <p id=\"upgradeText\"></p>\n             <button id=\"resumeButton\">Resume Game</button>\n        </div>\n    </div>\n</body>",
    "css": "#gameWindow {\n    width: 800px;\n    height: 800px;\n    border: 2px solid black;\n    position: relative;\n    margin: auto;\n}\n\n#scoreBoard {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    font-size: 20px;\n}\n\n#startButton, #pauseButton {\n    position: absolute;\n    top: 50px;\n    left: 10px;\n}\n\n#pauseButton {\n    top: 90px;\n}\n\n#minefield {\n    width: 100%;\n    height: 100%;\n    background-color: lightgray;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between; \n}\n\n#minefield div {\n    width: 5%;\n    height: 5%;\n    box-sizing: border-box;\n    border: 1px solid black;\n}\n\n.mine.revealed{\n    background-color: red;\n}\n\n.marked {\n    background-color: orange;\n}\n\n.clear.revealed {\n    background-color: white;\n}\n\n.panel {\n    position: absolute;\n    top: 40px;\n    right: 20px;\n    padding: 20px;\n    border: 2px solid black;\n    background-color: white;\n    width: 240px;\n    display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n    display: block;\n    margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 20;\nvar height = 20;\nvar board = [];\nvar gameStarted = false;\nvar clickedElement = null;\n\nfunction createBoard(width, height) {\n    for (var i = 0; i < width; i++){\n        board[i] = [];\n        for (var j = 0; j < height; j++){\n            board[i][j] = Math.random() > 0.7 ? 'mine' : 'clear';\n        }\n    }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n    document.getElementById('score').innerText = 0;\n    createBoard(width, height);\n    generateMinefield(width, height);\n    gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n    clearInterval(gameInterval);\n    gameInterval = null;\n    document.getElementById('upgradeMenu').style.display = \"block\";\n    document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n    document.getElementById('upgradeMenu').style.display = \"none\";\n    if (gameInterval === null) {\n        gameInterval = setInterval(runGame, 1000);\n    }\n}\n\nfunction closeUpgradeMenu() {\n    document.getElementById('upgradeMenu').style.display = \"none\";\n    document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n    for (var i = 0; i < width; i++){\n        for (var j = 0; j < height; j++){\n            var square = document.createElement('div');\n            square.classList.add(board[i][j]);\n            square.dataset.i = i;\n            square.dataset.j = j;\n            square.addEventListener('click', squareClicked);\n            square.addEventListener('contextmenu', squareMarked);\n            minefield.appendChild(square);\n        }\n    }\n}\n\nfunction squareMarked(e){\n    e.preventDefault();\n    var i = parseInt(e.target.dataset.i);\n    var j = parseInt(e.target.dataset.j);\n    e.target.classList.add('marked');\n}\n\nfunction squareClicked(e) {\n    clickedElement = e.target;\n    var i = parseInt(e.target.dataset.i);\n    var j = parseInt(e.target.dataset.j);\n    if (!gameStarted) {\n        gameStarted = true;\n        clearArea(i, j);\n    }\n    e.target.classList.add('revealed');\n    var mines = countMines(i, j);\n    e.target.textContent = mines > 0 ? mines : '';\n    if (mines === 0) {\n        revealClearArea(i, j);\n    }\n}\n\nfunction runGame() {\n    // Add game logic here\n}\n\nfunction clearArea(i, j) {\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            if (board[x][y] === 'mine') {\n                board[x][y] = 'clear';\n                let square = minefield.children[x * width + y];\n                square.classList.remove('mine');\n                square.classList.add('clear');\n            }\n        }\n    }\n}\n\nfunction countMines(i, j) {\n    var mines = 0;\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            if (board[x][y] === 'mine') {\n                mines++;\n            }\n        }\n    }\n    return mines;\n}\n\nfunction revealClearArea(i, j) {\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            let square = minefield.children[x * width + y];\n            if (!square.classList.contains('revealed')) {\n                square.classList.add('revealed');\n                if (board[x][y] !== 'mine') {\n                    square.click();\n                }\n            }\n        }\n    }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"menu\">\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause</button>\n    <button id=\"updateButton\">Updates</button>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 2;\n}\n\n#menu {\n  position: absolute;\n  top: 30px;\n  left: 40px;\n}\n\n#startButton, #pauseButton {\n  display : none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 200px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  display: none;\n  z-index: 1;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div {\n  border: 1px solid black;\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', updateGame);\ndocument.getElementById('closeUpdates').addEventListener('click', closeUpdateMenu);\n\nvar gamePaused = false;\n\nfunction startGame() {\n  gamePaused = false;\n  document.getElementById('score').innerText = 0;\n  document.getElementById('startButton').style.display = \"none\";\n  document.getElementById('pauseButton').style.display = \"inline\";\n  document.getElementById('updateButton').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"none\";\n  document.getElementById('updateMenu').style.display = \"none\";\n  \n  // Chess game logic will go here\n  initializeChessBoard();\n}\n\nfunction pauseGame() {\n  if(!gamePaused) {\n    gamePaused = true;\n    document.getElementById('pauseButton').innerText = \"Resume\";\n  } else {\n    gamePaused = false;\n    document.getElementById('pauseButton').innerText = \"Pause\";\n  }\n}\n\nfunction updateGame() {\n  gamePaused = true;\n  document.getElementById('updateMenu').style.display = \"block\";\n  document.getElementById('updateText').innerText = \"Your game updates here.\";\n  document.getElementById('startButton').style.display = \"inline\";\n  document.getElementById('pauseButton').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"inline\";\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = \"none\";\n  gamePaused = false;\n}\n\nfunction initializeChessBoard() {\n  const board = document.getElementById('chessBoard');\n  for (let i = 0; i < 64; i++) {\n    const div = document.createElement('div');\n    board.appendChild(div);\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#gameMenu, #menu {\n  position: absolute;\n  top: 30px;\n  left: 40px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  display: none;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div {\n  border: 1px solid black;\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "document.getElementById('startGame').addEventListener('click', startGame);\ndocument.getElementById('pauseGame').addEventListener('click', pauseGame);\ndocument.getElementById('openUpdates').addEventListener('click', updateGame);\ndocument.getElementById('closeUpdates').addEventListener('click', closeUpdateMenu);\n\nvar gamePaused = false;\n\nfunction startGame() {\n  gamePaused = false;\n  document.getElementById('score').innerText = 0;\n  document.getElementById('startGame').style.display = \"none\";\n  document.getElementById('pauseGame').style.display = \"inline\";\n  document.getElementById('openUpdates').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"none\";\n  document.getElementById('updateMenu').style.display = \"none\";\n\n  // Chess game logic will go here\n  initializeChessBoard();\n}\n\nfunction pauseGame() {\n  if(!gamePaused) {\n    gamePaused = true;\n    document.getElementById('pauseGame').innerText = \"Resume\";\n  } else {\n    gamePaused = false;\n    document.getElementById('pauseGame').innerText = \"Pause\";\n  }\n}\n\nfunction updateGame() {\n  gamePaused = true;\n  document.getElementById('updateMenu').style.display = \"block\";\n  document.getElementById('updateText').innerText = \"Your game updates here.\";\n  document.getElementById('startGame').style.display = \"inline\";\n  document.getElementById('pauseGame').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"inline\";\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = \"none\";\n  gamePaused = false;\n}\n\nfunction initializeChessBoard() {\n  const board = document.getElementById('chessBoard');\n  for (let i = 0; i < 64; i++) {\n    const div = document.createElement('div');\n    board.appendChild(div);\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#gameMenu, #menu {\n  position: absolute;\n  top: 30px;\n  left: 40px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  display: none;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div {\n  border: 1px solid black;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.2rem;\n  color: red;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "document.getElementById('startGame').addEventListener('click', startGame);\ndocument.getElementById('pauseGame').addEventListener('click', pauseGame);\ndocument.getElementById('openUpdates').addEventListener('click', updateGame);\ndocument.getElementById('closeUpdates').addEventListener('click', closeUpdateMenu);\n\nvar gamePaused = false;\n\nfunction startGame() {\n  gamePaused = false;\n  document.getElementById('score').innerText = 0;\n  document.getElementById('startGame').style.display = \"none\";\n  document.getElementById('pauseGame').style.display = \"inline\";\n  document.getElementById('openUpdates').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"none\";\n  document.getElementById('updateMenu').style.display = \"none\";\n\n  // Chess game logic will go here\n  initializeChessBoard();\n}\n\nfunction pauseGame() {\n  if(!gamePaused) {\n    gamePaused = true;\n    document.getElementById('pauseGame').innerText = \"Resume\";\n  } else {\n    gamePaused = false;\n    document.getElementById('pauseGame').innerText = \"Pause\";\n  }\n}\n\nfunction updateGame() {\n  gamePaused = true;\n  document.getElementById('updateMenu').style.display = \"block\";\n  document.getElementById('updateText').innerText = \"Your game updates here.\";\n  document.getElementById('startGame').style.display = \"inline\";\n  document.getElementById('pauseGame').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"inline\";\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = \"none\";\n  gamePaused = false;\n}\n\nfunction initializeChessBoard() {\n  const board = document.getElementById('chessBoard');\n  const pieces = ['Rook', 'Knight', 'Bishop', 'Queen', 'King', 'Bishop', 'Knight', 'Rook'];\n  for (let i = 0; i < 64; i++) {\n    const div = document.createElement('div');\n    if(i < 8 || i >= 56){\n      div.innerText = pieces[i%8];\n    }\n    board.appendChild(div);\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\" style=\"display: none;\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n    <button id=\"closeUpdates\" style=\"display: none;\">Close Updates</button>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#gameMenu, #menu {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  display: none;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div {\n  border: 1px solid black;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.2rem;\n  color: red;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "window.onload = function() {\n  document.getElementById('startGame').addEventListener('click', startGame);\n  document.getElementById('pauseGame').addEventListener('click', pauseGame);\n  document.getElementById('openUpdates').addEventListener('click', updateGame);\n  document.getElementById('closeUpdates').addEventListener('click', closeUpdateMenu);\n\n  var gamePaused = false;\n\n  function startGame() {\n    gamePaused = false;\n    document.getElementById('score').innerText = 0;\n    document.getElementById('startGame').style.display = \"none\";\n    document.getElementById('pauseGame').style.display = \"inline\";\n    document.getElementById('openUpdates').style.display = \"inline\";\n    document.getElementById('closeUpdates').style.display = \"none\";\n    document.getElementById('updateMenu').style.display = \"none\";\n\n    // Chess game logic will go here\n    initializeChessBoard();\n  }\n\n  function pauseGame() {\n    if(!gamePaused) {\n      gamePaused = true;\n      document.getElementById('pauseGame').innerText = \"Resume\";\n    } else {\n      gamePaused = false;\n      document.getElementById('pauseGame').innerText = \"Pause\";\n    }\n  }\n\n  function updateGame() {\n    gamePaused = true;\n    document.getElementById('updateMenu').style.display = \"block\";\n    document.getElementById('updateText').innerText = \"Your game updates here.\";\n    document.getElementById('startGame').style.display = \"none\";\n    document.getElementById('pauseGame').style.display = \"none\";\n    document.getElementById('closeUpdates').style.display = \"inline\";\n    document.getElementById('openUpdates').style.display = \"none\";\n  }\n\n  function closeUpdateMenu() {\n    document.getElementById('updateMenu').style.display = \"none\";\n    document.getElementById('openUpdates').style.display = \"inline\";\n    gamePaused = false;\n  }\n\n  function initializeChessBoard() {\n    const board = document.getElementById('chessBoard');\n    const pieces = ['Rook', 'Knight', 'Bishop', 'Queen', 'King', 'Bishop', 'Knight', 'Rook'];\n    for (let i = 0; i < 64; i++) {\n      const div = document.createElement('div');\n      if(i < 8 || i >= 56){\n        div.innerText = pieces[i%8];\n      }\n      board.appendChild(div);\n    }\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n\n#scoreBoard, #gameMenu button, #menu button, #updateMenu, #pauseGame {\n  display: none;\n}\n\n#gameMenu button, #menu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n.chess-piece {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.2rem;\n  color: red;\n  cursor: pointer;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet activePiece = null;\nlet score = 0;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n    if (!gamePaused) {\n      activePiece = null;\n    }\n  }\n\n  function openUpdates() {\n    document.getElementById('updateMenu').style.display = 'block';\n    openUpdatesBtn.style.display = 'none';\n    closeUpdatesBtn.style.display = 'inline';\n  }\n\n  function closeUpdates() {\n    document.getElementById('updateMenu').style.display = 'none';\n    openUpdatesBtn.style.display = 'inline';\n    closeUpdatesBtn.style.display = 'none';\n  }\n\n  function initializeChessBoard() {\n    const pieces = ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'];\n    const chessBoard = document.getElementById('chessBoard');\n\n    for (let i = 0; i < 64; i++) {\n      const cell = document.createElement('div');\n      if (i < 8 || (i >= 48 && i < 56)) {\n        const piece = document.createElement('div');\n        piece.className = 'chess-piece';\n        piece.textContent = (i < 8 ? pieces[i] : pieces[i - 48]);\n        piece.addEventListener('click', function() {\n          if (!gamePaused && (!activePiece || activePiece === piece)) {\n            piece.style.backgroundColor = piece.style.backgroundColor ? '' : 'blue';\n            activePiece = piece.style.backgroundColor ? piece : null;\n          }\n        });\n        cell.appendChild(piece);\n      }\n      chessBoard.appendChild(cell);\n    }\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n.chess-piece {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.2rem;\n  color: red;\n  cursor: pointer;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('scoreBoard');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n  const board = document.getElementById('chessBoard');\n  for (let i = 0; i < 64; i++) {\n    const div = document.createElement('div');\n    board.appendChild(div);\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('scoreBoard');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    const board = document.getElementById('chessBoard');\n    for (let i = 0; i < 64; i++) {\n      const square = document.createElement('div');\n      board.appendChild(square);\n      if ((i + Math.floor(i/8)) % 2 === 0) {\n        square.style.backgroundColor = 'white';\n      } else {\n        square.style.backgroundColor = 'black';\n      }\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('scoreBoard');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    const boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"], \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n    const board = document.getElementById('chessBoard');\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardPieces[row][col];\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('scoreBoard');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    const boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n    const board = document.getElementById('chessBoard');\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardPieces[row][col];\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n          square.addEventListener('click', function() {\n            this.classList.add('selected');\n          });\n        }\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    const board = document.getElementById('chessBoard');\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardPieces[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        const endSquare = document.getElementById(`square-${row}-${col}`);\n        const startSquare = document.getElementById(`square-${selectedSquare[0]}-${selectedSquare[1]}`);\n        startSquare.textContent = \"\";\n        endSquare.textContent = selectedPiece;\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    } else if (selectedPiece && this.textContent === \"\") {\n      boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n      boardState[row][col] = selectedPiece;\n      selectedPiece = null;\n      selectedSquare = null;\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    } else if (selectedPiece && this.textContent === \"\") {\n      boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n      boardState[row][col] = selectedPiece;\n      selectedPiece = null;\n      selectedSquare = null;\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    } else if (selectedPiece && this.textContent === \"\") {\n      boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n      boardState[row][col] = selectedPiece;\n      selectedPiece = null;\n      selectedSquare = null;\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    } else if (selectedPiece && this.textContent === \"\") {\n      boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n      boardState[row][col] = selectedPiece;\n      selectedPiece = null;\n      selectedSquare = null;\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    } else if (selectedPiece && this.textContent === \"\") {\n      boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n      boardState[row][col] = selectedPiece;\n      selectedPiece = null;\n      selectedSquare = null;\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "function selectSquare() {\n  const coordStr = this.id.split('-').slice(1);\n  const coords = coordStr.map(str => parseInt(str));\n  const [row, col] = coords;\n  if (selectedPiece) {\n    boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n    boardState[row][col] = selectedPiece;\n    selectedPiece = null;\n    selectedSquare = null;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  } else if (this.textContent !== \"\") {\n    selectedPiece = this.textContent;\n    selectedSquare = coords;\n    this.classList.add('selected');\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow + 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow - 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1], 'p': [6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'].includes(startRow)) {\n        firstMove['P'] = firstMove['P'].filter(row => row !== startRow);\n        return (endRow === startRow + 1 || endRow === startRow + 2) && startCol === endCol;\n      } else {\n        return endRow === startRow + 1 && startCol === endCol;\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'].includes(startRow)) {\n        firstMove['p'] = firstMove['p'].filter(row => row !== startRow);\n        return (endRow === startRow - 1 || endRow === startRow - 2) && startCol === endCol;\n      } else {\n        return endRow === startRow - 1 && startCol === endCol;\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1], 'p': [6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'].includes(startRow)) {\n        firstMove['P'] = firstMove['P'].filter(row => row !== startRow);\n        return (endRow === startRow + 1 && startCol === endCol) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1);\n      } else {\n        return endRow === startRow + 1 && (startCol === endCol || Math.abs(startCol - endCol) === 1);\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'].includes(startRow)) {\n        firstMove['p'] = firstMove['p'].filter(row => row !== startRow);\n        return (endRow === startRow - 1 && startCol === endCol) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1);\n      } else {\n        return endRow === startRow - 1 && (startCol === endCol || Math.abs(startCol - endCol) === 1);\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1], 'p': [6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'].includes(startRow)) {\n        firstMove['P'] = firstMove['P'].filter(row => row !== startRow);\n        return (endRow === startRow + 1 && startCol === endCol) || (endRow === startRow + 2 && startCol === endCol) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1);\n      } else {\n        return endRow === startRow + 1 && (startCol === endCol || Math.abs(startCol - endCol) === 1);\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'].includes(startRow)) {\n        firstMove['p'] = firstMove['p'].filter(row => row !== startRow);\n        return (endRow === startRow - 1 && startCol === endCol) || (endRow === startRow - 2 && startCol === endCol) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1);\n      } else {\n        return endRow === startRow - 1 && (startCol === endCol || Math.abs(startCol - endCol) === 1);\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1], 'p': [6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'].includes(startRow)) {\n        firstMove['P'] = firstMove['P'].filter(row => row !== startRow);\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'].includes(startRow)) {\n        firstMove['p'] = firstMove['p'].filter(row => row !== startRow);\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords) || knightRules([selectedSquare[0],selectedSquare[1]], coords) || bishopRules([selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece && piece.toLowerCase() !== selectedPiece.toLowerCase()) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],   \n        [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], \n        [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] };\nlet castlingDone = { 'w': false, 'b': false };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],   \n        [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], \n        [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] };\nlet castlingDone = { 'w': false, 'b': false };\nlet movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],   \n        [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], \n        [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] };\nlet castlingDone = { 'w': false, 'b': false };\nlet movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],   \n        [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], \n        [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n    alert(\"Possible moves: \" + possibleMoves.map(move => `(${move[0]}, ${move[1]})`).join(\", \"));\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n    if (piece.substring(1).toLowerCase() === 'b') {\n      alert(`Bishop can move to: ${possibleMoves.map(move => `(${move[0]}, ${move[1]})`).join(', ')}`);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck() {\n    const kingPosition = findKingPosition(currentPlayer);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] !== currentPlayer[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (boardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck()) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer === \"white\" ? \"Black\" : \"White\"} king is in check!`);\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, currentPlayer === \"white\" ? \"black\" : \"white\")) {\n          alert(`${currentPlayer === \"white\" ? \"Black\" : \"White\"} king is in check!`);\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer === \"white\" ? \"White\" : \"Black\"} king is in check!`);\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer === \"white\" ? \"White\" : \"Black\"} king is in check!`);\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer === \"white\" ? \"White\" : \"Black\"} king is in check!`);\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: red;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: red;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      if (square.classList.contains(\"check-highlight\")) {\n        square.classList.remove(\"check-highlight\");\n        square.classList.add(\"highlight\");\n      } else {\n        square.classList.add(\"highlight\");\n      }\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: red;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      if (square.classList.contains(\"check-highlight\")) {\n        square.classList.remove(\"check-highlight\");\n        square.classList.add(\"highlight\");\n      } else {\n        square.classList.add(\"highlight\");\n      }\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[player] ||\n      movedPieces[player + \"k\"] ||\n      movedPieces[player + \"r\"][rookCol === 7 ? 1 : 0] ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n          movedPieces[selectedPiece[0] + \"k\"] = true;\n          movedPieces[selectedPiece[0] + \"r\"][col > selectedSquare[1] ? 1 : 0] = true;\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[player] ||\n      movedPieces[player + \"k\"] ||\n      movedPieces[player + \"r\"][rookCol === 7 ? 1 : 0] ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n          movedPieces[selectedPiece[0] + \"k\"] = true;\n          movedPieces[selectedPiece[0] + \"r\"][col > selectedSquare[1] ? 1 : 0] = true;\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[player] ||\n      movedPieces[player + \"k\"] ||\n      movedPieces[player + \"r\"][rookCol === 7 ? 1 : 0] ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n          movedPieces[selectedPiece[0] + \"k\"] = true;\n          movedPieces[selectedPiece[0] + \"r\"][col > selectedSquare[1] ? 1 : 0] = true;\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[player] ||\n      movedPieces[player + \"k\"] ||\n      movedPieces[player + \"r\"][rookCol === 7 ? 1 : 0] ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n          movedPieces[selectedPiece[0] + \"k\"] = true;\n          movedPieces[selectedPiece[0] + \"r\"][col > selectedSquare[1] ? 1 : 0] = true;\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 2px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 2px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 2px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[player] ||\n      movedPieces[player + \"k\"] ||\n      movedPieces[player + \"r\"][rookCol === 7 ? 1 : 0] ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n          movedPieces[selectedPiece[0] + \"k\"] = true;\n          movedPieces[selectedPiece[0] + \"r\"][col > selectedSquare[1] ? 1 : 0] = true;\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 2px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 2px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 2px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[player] ||\n      movedPieces[player + \"k\"] ||\n      movedPieces[player + \"r\"][rookCol === 7 ? 1 : 0] ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n          movedPieces[selectedPiece[0] + \"k\"] = true;\n          movedPieces[selectedPiece[0] + \"r\"][col > selectedSquare[1] ? 1 : 0] = true;\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 2px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 2px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 2px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 2px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 2px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 2px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n              alert(`Rook on the right has moved ${rookMoves[selectedPiece[0] + \"r\"][1]} times.`);\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n              alert(`Rook on the left has moved ${rookMoves[selectedPiece[0] + \"r\"][0]} times.`);\n            }\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function isValidMove(piece, start, end) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, end);\n      case \"r\":\n        return rookRules(start, end);\n      case \"n\":\n        return knightRules(start, end);\n      case \"b\":\n        return bishopRules(start, end);\n      case \"q\":\n        return queenRules(start, end);\n      case \"k\":\n        return kingRules(start, end) || castlingRules(start, end);\n      default:\n        return false;\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function isValidMove(piece, start, end) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, end);\n      case \"r\":\n        return rookRules(start, end);\n      case \"n\":\n        return knightRules(start, end);\n      case \"b\":\n        return bishopRules(start, end);\n      case \"q\":\n        return queenRules(start, end);\n      case \"k\":\n        return kingRules(start, end) || castlingRules(start, end);\n      default:\n        return false;\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) && !isKingInCheck(boardState, piece[0] === 'w' ? 'white' : 'black', end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player, kingPosition = null) {\n    if (!kingPosition) {\n      kingPosition = findKingPosition(tempBoardState, player);\n    }\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function isValidMove(piece, start, end) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, end);\n      case \"r\":\n        return rookRules(start, end);\n      case \"n\":\n        return knightRules(start, end);\n      case \"b\":\n        return bishopRules(start, end);\n      case \"q\":\n        return queenRules(start, end);\n      case \"k\":\n        return kingRules(start, end) || castlingRules(start, end);\n      default:\n        return false;\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) && !isKingInCheck(boardState, piece[0] === 'w' ? 'white' : 'black', end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player, kingPosition = null) {\n    if (!kingPosition) {\n      kingPosition = findKingPosition(tempBoardState, player);\n    }\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function isValidMove(piece, start, end) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, end);\n      case \"r\":\n        return rookRules(start, end);\n      case \"n\":\n        return knightRules(start, end);\n      case \"b\":\n        return bishopRules(start, end);\n      case \"q\":\n        return queenRules(start, end);\n      case \"k\":\n        return kingRules(start, end) || castlingRules(start, end);\n      default:\n        return false;\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) && !isKingInCheck(boardState, piece[0] === 'w' ? 'white' : 'black', end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player, kingPosition = null) {\n    if (!kingPosition) {\n      kingPosition = findKingPosition(tempBoardState, player);\n    }\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function isValidMove(piece, start, end) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, end);\n      case \"r\":\n        return rookRules(start, end);\n      case \"n\":\n        return knightRules(start, end);\n      case \"b\":\n        return bishopRules(start, end);\n      case \"q\":\n        return queenRules(start, end);\n      case \"k\":\n        return kingRules(start, end) || castlingRules(start, end);\n      default:\n        return false;\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) && !isKingInCheck(boardState, piece[0] === 'w' ? 'white' : 'black', end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player, kingPosition = null) {\n    if (!kingPosition) {\n      kingPosition = findKingPosition(tempBoardState, player);\n    }\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function isValidMove(piece, start, end) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, end);\n      case \"r\":\n        return rookRules(start, end);\n      case \"n\":\n        return knightRules(start, end);\n      case \"b\":\n        return bishopRules(start, end);\n      case \"q\":\n        return queenRules(start, end);\n      case \"k\":\n        return kingRules(start, end) || castlingRules(start, end);\n      default:\n        return false;\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  }
]